# ─── Example Showing All Task Features ────────────────────────────────────────────────
# setup:
#   desc: "⚙️ Setup environment: install dependencies, generate config"
#   deps:
#     - init:dev
#   prompt:
#     - "This will install tools and dependencies. Continue? (y/N)"
#   preconditions:
#     - sh: '[ -f ./configs/example.conf ]'
#       msg: "Missing configs/example.conf — please copy from example.conf"
#   cmds:
#     - echo "Installing dependencies..."
#     - echo "Generating configuration files..."
#   env:
#     SETUP_MODE: "auto"
#   vars:
#     PROJECT_NAME: "{{.PROJECT_NAME}}"


# ─── Initialized Tasks ────────────────────────────────────────────────────────────────
# init:dev:
#   desc: "Initialize local/dev environment specifics"
#   internal: true
#   cmds:
#     - echo "Running init:dev task for ENV={{.ENV}}"
#   platforms: [linux, darwin]


# ─── Example Task with Inputs, Status Checks and Directory ────────────────────────────
# run-task:
#   desc: "Run a task with an input parameter"
#   dir: terraform/environments/dev
#   requires:
#     vars:
#       - task_name
#   cmds:
#     - echo "Running {{.task_name}}"
#   status:
#     - 'test -f output/{{.task_name}}.done'

# ─── Global Configuration ───────────────────────────────────────────────────────
version: "3"
output: prefixed
dotenv:
  - .env
  - .env.local

env:
  ENV: '{{.ENV | default "dev"}}'
  DEBUG: '{{.DEBUG | default "false"}}'

vars:
  # compose
  DOCS_COMPOSE_FILE: docker-compose.docs.yml
  LOCAL_COMPOSE_FILE: docker-compose.local.yml
  PROD_COMPOSE_FILE: docker-compose.prod.yml
  LOCAL_PROJECT_NAME: local
  # ports
  MKDOCS_PORT: 0.0.0.0:8030
  # urls
  CELERY_URL: "http://127.0.0.1:5555"
  DJANGO_URL: "http://127.0.0.1:8000"
  MAILPIT_URL: "http://127.0.0.1:8025"

includes:
  common:
    taskfile: ./Taskfile.gitflow.yml
    flatten: true

# ─── Core Tasks ────────────────────────────────────────────────────────────────
tasks:
  default:
    desc: "List all tasks"
    cmds:
      - task --list-all

  setup:
    desc: "Setup environment: install dependencies, generate config etc."
    cmds:
      - pre-commit install
      - docker compose -f {{.LOCAL_COMPOSE_FILE}} -p {{.LOCAL_PROJECT_NAME}} up -d

# ─── Environment Management ────────────────────────────────────────────────────
  dev:
    desc: "Provision and start local development environment"
    cmds:
      - docker compose -f {{.LOCAL_COMPOSE_FILE}} -p {{.LOCAL_PROJECT_NAME}} run --rm django python manage.py migrate
      - |
        docker compose -f {{.LOCAL_COMPOSE_FILE}} -p {{.LOCAL_PROJECT_NAME}} run --rm \
          -e DJANGO_SUPERUSER_USERNAME=admin \
          -e DJANGO_SUPERUSER_EMAIL=admin@admin.com \
          -e DJANGO_SUPERUSER_PASSWORD=admin123 \
          django python manage.py createsuperuser --noinput

  prod:
    desc: "Provision and deploy to production"

# ─── Misc ────────────────────────────────────────────────────
  info:
    desc: "URLs to visit"
    cmds:
      - echo "CELERY -> {{.CELERY_URL}}"
      - echo "DJANGO -> {{.DJANGO_URL}}"
      - echo "Mailpit -> {{.MAILPIT_URL}}"

  status:
    desc: "Check if everything is running"
    cmds:
      - docker ps --filter "label=com.docker.compose.project={{.LOCAL_PROJECT_NAME}}"

  versions:
    desc: "List current deployed versions"
    dir: mkdocs_docs/
    cmds:
      - uv run mike list

# ─── System Management ─────────────────────────────────────────────────────────
  ports:
    desc: "List ports in use"
    cmds:
      - ss -tunl

# ─── Documentation ─────────────────────────────────────────────────────────────
  docs:
    desc: "Serve docs locally"
    dir: mkdocs_docs/
    cmds:
      - uv run mkdocs serve --clean -a {{.MKDOCS_PORT}}

  docs-docker:
    desc: "Serve docs locally with docker"
    cmds:
      - docker compose -f {{.DOCS_COMPOSE_FILE}} up

# ─── Cleanup Tasks ─────────────────────────────────────────────────────────────
  # dev
  compose-down-dev:
    desc: "Shut down dev containers"
    cmds:
      - docker compose -f {{.LOCAL_COMPOSE_FILE}} -p {{.LOCAL_PROJECT_NAME}} down

  cleanup-zone:
    desc: "Cleans up all Zone.Identifier files"
    cmds:
      - find . -type f -name "*Zone.Identifier*" -delete

  cleanup-dev:
    desc: "Cleanup development resources only"
    cmds:
      - docker compose -f {{.DOCS_COMPOSE_FILE}} down

  cleanup-prod:
    desc: "Cleanup production resources only"

  cleanup-all:
    desc: "Cleanup dev and prod in one swoop"
    cmds:
      - task: cleanup-dev
      - task: cleanup-prod
      - task: cleanup-zone

# ─── Assets and Compression ────────────────────────────────────────────────────
  mkdir-assets:
    desc: Create the assets/ directory if it doesn't exist
    cmds:
      - cmd: mkdir -p assets
        silent: true
        platforms: [linux, darwin]
      - cmd: powershell -NoProfile -Command "New-Item -ItemType Directory -Force assets | Out-Null"
        silent: true
        platforms: [windows]

  compress:
    desc: Compress a video to assets/demo-video-small.mp4 (pass video=....mp4)
    deps: [mkdir-assets]
    requires:
      vars: [video]
    vars:
      crf: "{{.crf | default 28}}"
      preset: '{{.preset | default "veryfast"}}'
    cmds:
      - >
        ffmpeg -i "{{.video}}"
        -vf "scale=1280:-2,fps=24"
        -c:v libx264 -crf {{.crf}} -preset {{.preset}}
        -movflags +faststart
        -c:a aac -b:a 96k
        assets/demo-video-small.mp4
        -y
    sources:
      - "{{.video}}"
    generates:
      - "assets/demo-video-small.mp4"

  compress-gif:
    desc: Compress a GIF to assets/demo-video-small.gif (pass gif=....gif)
    deps: [mkdir-assets]
    requires:
      vars: [gif]
    vars:
      fps: "{{.fps | default 8}}"
      colors: "{{.colors | default 64}}"
    cmds:
      - >
        ffmpeg -y -i "{{.gif}}"
        -vf "fps={{.fps}},scale=iw:-1:flags=lanczos,palettegen=max_colors={{.colors}}"
        assets/palette.png
      - >
        ffmpeg -y -i "{{.gif}}" -i assets/palette.png
        -lavfi "fps={{.fps}},scale=iw:-1:flags=lanczos[x];[x][1:v]paletteuse=dither=bayer:bayer_scale=5"
        assets/demo-video-small.gif
      - rm -f assets/palette.png
    sources:
      - "{{.gif}}"
    generates:
      - "assets/demo-video-small.gif"
