{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Django Portfolio Template <p>     A production-ready Django template for personal portfolio websites. It demonstrates a standardised project structure, containerised development environment, automated task runner, and documentation integration. It is designed to showcase projects, experience, and skills with minimal setup.   </p> <p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>List of tools used in the project</p> <p> </p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Important</p> <p>This project uses Devbox to provide a consistent development environment.</p> <ol> <li> <p>Install Docker Docker installation guide</p> </li> <li> <p>Install Devbox Devbox installation guide</p> </li> <li> <p>Clone the repository <pre><code>git clone ...\ncd ...\n</code></pre></p> </li> <li> <p>Start Devbox shell</p> </li> </ol> <pre><code>devbox shell\n</code></pre> <p>First run may take several minutes to install tools, but subsequent runs spin up in seconds.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>task setup\ntask status   # check if everything is running\ntask dev      # start development stack\ntask info     # to list urls to visit\ntask cleanup-dev\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For full documentation, setup instructions, and architecture details, visit the docs directory or run locally with:</p> <pre><code>task docs\n</code></pre> <p>Then open: http://127.0.0.1:8030/</p>"},{"location":"#tasks-automation","title":"Tasks (Automation)","text":"<p>Important</p> <p>This project is designed for a simple, one-command setup. All necessary actions are orchestrated through <code>Taskfile.yml</code>.</p> <p>The <code>Taskfile.gitflow.yml</code> provides a structured Git workflow using Git Flow. This helps in managing features, releases, and hotfixes in a standardized way. To run these tasks just its the same as running any other task. Using gitflow is optional. If you do not want the gitflow tasks, you can remove the <code>Taskfile.gitflow.yml</code> file and unlink it from the <code>Taskfile.yml</code> file (remove the <code>includes</code> section). If you cannot find the section use CTRL + F to search for <code>Taskfile.gitflow.yml</code>.</p> <p>To see all tasks:</p> <pre><code>task --list-all\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Open an issue or submit a PR.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE</code> for more info.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>LinkedIn</li> <li>Twitter/X</li> <li>seannjela@outlook.com</li> <li>About Me</li> </ul>"},{"location":"disclaimer/","title":"Disclaimer","text":"<p>The information and resources provided in this project are intended for educational and informational purposes only.</p>"},{"location":"disclaimer/#no-warranty","title":"No Warranty","text":"<p>This project is provided \"as is\" without warranty of any kind\u2014express or implied. While I have made every effort to ensure the accuracy and reliability of the information, I make no guarantees about:</p> <ul> <li>Suitability for any specific purpose  </li> <li>Completeness or accuracy of configurations or scripts  </li> <li>Security of infrastructure or deployments  </li> </ul> <p>Use at your own risk.</p>"},{"location":"disclaimer/#for-personal-use-learning","title":"For Personal Use / Learning","text":"<p>This project is part of a personal portfolio and is primarily intended to:</p> <ul> <li>Demonstrate practical implementation of technical concepts  </li> <li>Serve as a sandbox for experimentation  </li> <li>Be a reference for future personal or professional projects  </li> </ul> <p>It is not intended for production use without proper review and adaptation.</p>"},{"location":"disclaimer/#security-and-sensitive-data","title":"Security and Sensitive Data","text":"<p>Do not reuse any credentials, tokens, secrets, or keys shown in this project. They are either fake, expired, or meant only for demonstration.</p> <p>Always handle secrets securely and follow best practices for secret management (e.g., environment variables, sealed secrets, vaults).</p>"},{"location":"disclaimer/#opinions-are-my-own","title":"Opinions Are My Own","text":"<p>All opinions, techniques, and practices shared here reflect my personal learning journey and are not affiliated with or endorsed by any employer, client, or organization.</p>"},{"location":"disclaimer/#license","title":"License","text":"<p>This project is licensed under the MIT, which permits reuse, modification, and distribution\u2014with proper attribution.</p>"},{"location":"disclaimer/#contact","title":"Contact","text":"<p>If you spot issues, risks, or have questions about how something works, feel free to reach out:</p> <ul> <li>seannjela@outlook.com</li> <li>GitHub Issues</li> </ul>"},{"location":"0-quickstart/0-prerequisites/","title":"Prerequisites","text":"<p>This project uses Devbox to manage the development environment. Devbox provides a consistent, isolated environment with all the necessary CLI tools pre-installed.</p>"},{"location":"0-quickstart/0-prerequisites/#docker","title":"Docker","text":"<ul> <li>Follow the installation instructions for your operating system.</li> </ul> <p>The rest of the tools are already installed in the devbox environment</p>"},{"location":"0-quickstart/0-prerequisites/#devbox","title":"Devbox","text":"<ul> <li>Follow the installation instructions for your operating system.</li> </ul>"},{"location":"0-quickstart/0-prerequisites/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/your-username/your-repo.git\ncd your-repo\n</code></pre>"},{"location":"0-quickstart/0-prerequisites/#start-the-devbox-environment-and-poetry-environment","title":"Start the Devbox Environment and poetry environment","text":"<pre><code>devbox shell # Start the devbox environment (this will also start the poetry environment)\npoetry install # Install dependencies\npoetry env activate # use the output to activate the poetry environment ( ONLY IF DEVBOX DOES NOT ACTIVATE THE ENVIRONMENT)\n</code></pre> <p>Note</p> <p>The first time you run <code>devbox shell</code>, it will take a few minutes to install the necessary tools. But after that it will be much faster.</p>"},{"location":"0-quickstart/1-getting-started/","title":"Getting Started","text":"<p>Welcome! This section will walk you through how to get the project up and running on your local machine or development environment.</p>"},{"location":"0-quickstart/1-getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed all the requirements. See the Prerequisites section for detailed instructions on installing these tools.</p>"},{"location":"0-quickstart/1-getting-started/#walkthrough","title":"Walkthrough","text":"<p>After everything is wired up, you can run the following commands:</p> <pre><code>task setup\n\ntask status # check if everything is running\n\n# GIVE EVERYTHING A MINUTE TO SETUP THEN\ntask dev\n</code></pre> <p>This will start the devbox environment and poetry environment and install all dependencies. And that is all you need to do to get started. (Yes, really.)</p> <p>In a seperate terminal, run:</p> <pre><code># Option 1\ntask docs\n\n# Or if you prefer the docker version:\n# Option 2\ntask docs-docker\n\n# ONLY RUN ONE OF THE ABOVE\n</code></pre> <p>Docs are then available at: http://127.0.0.1:8030/</p> <p>All other commands are in the form of tasks. The project task file is <code>Taskfile.yaml</code>.</p> <pre><code>task --list-all # to see all project tasks\ntask &lt;command&gt; # usage\n</code></pre> <p>The project also uses gitflow for version control with gh-pages deployment automation. This is optional but you can also automate it using the <code>Taskfile.gitflow.yaml</code> file.</p> <pre><code>task -t Taskfile.gitflow.yaml --list-all # to see all gitflow tasks\ntask -t Taskfile.gitflow.yaml &lt;command&gt; # usage\n</code></pre> <p>See the Tasks section for more information on all tasks.</p>"},{"location":"0-quickstart/1-getting-started/#cleanup","title":"Cleanup","text":"<p>To tear everything down after testing:</p> <pre><code>task cleanup-dev # to cleanup everything running locally\ntask cleanup-prod # to cleanup everything running in production (IF YOU USED ANY PROD. WORKFLOWS)\ntask cleanup-all # to cleanup everything (local and production)\n</code></pre>"},{"location":"0-quickstart/1-getting-started/#need-help","title":"Need Help?","text":"<p>If you get stuck:</p> <ul> <li>Check the Troubleshooting guide.</li> <li>Open an issue on GitHub</li> </ul> <p>Happy building!</p>"},{"location":"1-architecture/0-overview/","title":"System Architecture Overview","text":"<p>This section provides a high-level overview of the architecture and design decisions behind the project. It outlines the system's core components, their responsibilities, and how they interact.</p>"},{"location":"1-architecture/0-overview/#design-philosophy","title":"Design Philosophy","text":"<p>Summarise your approach or values. Examples:</p> <ul> <li>Modular and composable</li> <li>Secure by default</li> <li>Automation-first (e.g., IaC, CI/CD)</li> <li>Portable/local-dev friendly</li> </ul>"},{"location":"1-architecture/0-overview/#core-components","title":"Core Components","text":""},{"location":"1-architecture/0-overview/#1-infrastructure","title":"1. Infrastructure","text":"<ul> <li>Describe how infrastructure is provisioned (e.g., Terraform, Pulumi)</li> <li>Where it's deployed (e.g., local Kind cluster, cloud, etc.)</li> <li>Example:</li> <li>Kind cluster created via <code>task dev</code></li> <li>Terraform used to manage Argo CD and related resources</li> </ul>"},{"location":"1-architecture/0-overview/#2-cicd","title":"2. CI/CD","text":"<ul> <li>What tools handle deployment?</li> <li>Example:</li> <li>Argo CD handles Kubernetes app delivery using the App of Apps pattern</li> <li>Image updates via argocd-image-updater</li> <li>Optional notification layer (e.g., Slack integration)</li> </ul>"},{"location":"1-architecture/0-overview/#3-secrets-configuration","title":"3. Secrets &amp; Configuration","text":"<ul> <li>Mention secret handling (e.g., Sealed Secrets, SOPS, Vault)</li> <li>Config management tools (e.g., Helm, Kustomize)</li> </ul>"},{"location":"1-architecture/0-overview/#architecture-diagram","title":"Architecture Diagram","text":"<p>Add a visual overview of your system if available.</p> <p></p> <p>If not available yet, note:</p> <p>Architecture diagram to be added in a future update.</p>"},{"location":"1-architecture/0-overview/#data-control-flow","title":"Data / Control Flow","text":"<p>Explain the high-level lifecycle or data flow:</p> <ol> <li>User runs <code>task dev</code></li> <li>Terraform provisions resources</li> <li>Argo CD bootstraps itself and deploys other apps</li> <li>Image updater checks container registries and pushes updates</li> <li>Notifications triggered via webhook \u2192 Slack</li> </ol>"},{"location":"1-architecture/0-overview/#related-pages","title":"Related Pages","text":"<ul> <li>Quickstart: Getting Started</li> <li>Topics / Application Layer</li> <li>Taskfile Automation</li> </ul>"},{"location":"2-project/1-topic2/","title":"Project Topic 2","text":""},{"location":"2-project/2-topic3/","title":"Project Topic 3","text":""},{"location":"2-project/notes/","title":"General notes","text":""},{"location":"2-project/notes/#basic-commands","title":"Basic Commands","text":"<p>Tip</p> <p>If running the stack using docker, <code>&lt;prefix&gt;</code> all ad-hoc commands with <code>docker compose -f docker-compose.local.yml run --rm django python</code></p>"},{"location":"2-project/notes/#setting-up-your-users","title":"Setting Up Your Users","text":"<ul> <li> <p>To create a normal user account, just go to Sign Up and fill out the form. Once you submit it, you'll see a \"Verify Your E-mail Address\" page. Go to your console to see a simulated email verification message. Copy the link into your browser. Now the user's email should be verified and ready to go.</p> </li> <li> <p>To create a superuser account, use this command:       <pre><code>&lt;prefix&gt; uv run python manage.py createsuperuser\n</code></pre> For convenience, you can keep your normal user logged in on Chrome and your superuser logged in on Firefox (or similar), so that you can see how the site behaves for both kinds of users.</p> </li> </ul>"},{"location":"2-project/notes/#type-checks","title":"Type checks","text":"<p>Running type checks with mypy:</p> <pre><code>```sh\n&lt;prefix&gt; uv run mypy django_template\n```\n</code></pre>"},{"location":"2-project/notes/#test-coverage","title":"Test coverage","text":"<p>To run the tests, check your test coverage, and generate an HTML coverage report:</p> <pre><code>```sh\n&lt;prefix&gt; uv run coverage run -m pytest\n&lt;prefix&gt; uv run coverage html\n&lt;prefix&gt; uv run open htmlcov/index.html\n```\n</code></pre>"},{"location":"2-project/notes/#running-tests-with-pytest","title":"Running tests with pytest","text":"<pre><code>```sh\n&lt;prefix&gt; uv run pytest\n```\n</code></pre>"},{"location":"2-project/notes/#live-reloading-and-sass-css-compilation","title":"Live reloading and Sass CSS compilation","text":"<p>Moved to Live reloading and SASS compilation.</p>"},{"location":"2-project/notes/#celery","title":"Celery","text":"<p>This app comes with Celery.</p> <p>To run a celery worker:</p> <pre><code>cd django_template\n&lt;prefix&gt; uv run celery -A config.celery_app worker -l info\n</code></pre> <p>Please note: For Celery's import magic to work, it is important where the celery commands are run. If you are in the same folder with manage.py, you should be right.</p> <p>To run periodic tasks, you'll need to start the celery beat scheduler service. You can start it as a standalone process:</p> <pre><code>cd django_template\n&lt;prefix&gt; uv run celery -A config.celery_app beat\n</code></pre> <p>or you can embed the beat service inside a worker with the <code>-B</code> option (not recommended for production use):</p> <pre><code>cd django_template\n&lt;prefix&gt; uv run celery -A config.celery_app worker -B -l info\n</code></pre>"},{"location":"2-project/notes/#email-server","title":"Email Server","text":"<p>In development, it is often nice to be able to see emails that are being sent from your application. For that reason local SMTP server Mailpit with a web interface is available as docker container.</p> <p>Container mailpit will start automatically when you will run all docker containers. Please check cookiecutter-django Docker documentation for more details how to start all containers.</p> <p>With Mailpit running, to view messages that are sent by your application, open your browser and go to <code>http://127.0.0.1:8025</code></p>"},{"location":"2-project/notes/#sentry","title":"Sentry","text":"<p>Sentry is an error logging aggregator service. You can sign up for a free account at https://sentry.io/signup/?code=cookiecutter or download and host it yourself. The system is set up with reasonable defaults, including 404 logging and integration with the WSGI application.</p> <p>You must set the DSN url in production.</p>"},{"location":"2-project/notes/#deployment","title":"Deployment","text":"<p>The following details how to deploy this application.</p>"},{"location":"2-project/notes/#docker","title":"Docker","text":"<p>See detailed cookiecutter-django Docker documentation.</p>"},{"location":"2-project/notes/#filtering-docker-compose-containers","title":"Filtering Docker Compose Containers","text":"<p>Docker does not record which <code>compose.local.yml</code> file created a container. Direct filtering by compose file name is not possible.</p>"},{"location":"2-project/notes/#approach-1-manual-labels","title":"Approach 1: Manual Labels","text":"<p>Add labels manually to each service:</p> <pre><code>labels:\n  - source=compose.local.yml\n</code></pre>"},{"location":"2-project/notes/#usage","title":"Usage","text":"<p>Filter containers:</p> <pre><code>docker ps --filter \"label=source=compose.local.yml\"\n</code></pre>"},{"location":"2-project/notes/#downsides","title":"Downsides","text":"<ul> <li>Duplication across every service in YAML.</li> <li>Typos or inconsistencies break filtering.</li> <li>Extra cognitive overhead for contributors.</li> <li>Risk of drift across environments (dev, prod).</li> <li>Labels are visible via <code>docker inspect</code> \u2192 metata leakage.</li> <li>No enforcement by Docker.</li> </ul>"},{"location":"2-project/notes/#approach-2-using-p-project-name-recommended","title":"Approach 2: Using <code>-p</code> Project Name (Recommended)","text":"<p>Run compose with an explicit project name:</p> <pre><code>docker compose -f compose.local.yml -p local up -d\n</code></pre> <p>Even <code>docker compose down</code> must use the same -p  that was used to bring the stack up. For any docker compose command that targets a project (including --rm clean-up options), you must also pass the same -p . <p>Docker auto-labels all resources:</p> <pre><code>com.docker.compose.project=local\n</code></pre>"},{"location":"2-project/notes/#usage_1","title":"Usage","text":"<p>Filter containers:</p> <pre><code>docker ps --filter \"label=com.docker.compose.project=local\"\n</code></pre>"},{"location":"2-project/notes/#advantages","title":"Advantages","text":"<ul> <li>No YAML edits.</li> <li>Enforced automatically by Docker Compose.</li> <li>Consistent across all services.</li> <li>Lower maintenance overhead.</li> </ul>"},{"location":"2-project/notes/#downsides_1","title":"Downsides","text":"<ul> <li>Must remember to always pass <code>-p local</code>.</li> <li>Forgetting <code>-p</code> daults to directory name, which creates a different project stack.</li> </ul>"},{"location":"2-project/notes/#best-practice","title":"Best Practice","text":"<ul> <li> <p>Always nvironment&gt;` for clear separation:</p> </li> <li> <p><code>-p local</code></p> </li> <li><code>-p staging</code></li> <li><code>-p prod</code></li> </ul>"},{"location":"2-project/setup/","title":"Setting things up","text":"<p>For getting everything up and ready it is best to refer to the official cookiecutter docs</p>"},{"location":"2-project/uv-notes/","title":"uv Cheat Sheet","text":""},{"location":"2-project/uv-notes/#installation","title":"Installation","text":"<pre><code># Linux / macOS\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows (PowerShell)\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Verify install\nuv --version\n</code></pre>"},{"location":"2-project/uv-notes/#projects","title":"Projects","text":"<pre><code># Create a new project in folder \"myproj\"\nuv init myproj\n\n# Create a new project in the current folder\nuv init\n</code></pre>"},{"location":"2-project/uv-notes/#dependencies","title":"Dependencies","text":"<pre><code># Add a package\nuv add requests\n\n# Add a package with version\nuv add django==4.2.7\n\n# Add a development dependency\nuv add --dev pytest\n\n# Remove a package\nuv remove requests\n</code></pre>"},{"location":"2-project/uv-notes/#locking-and-installing","title":"Locking and Installing","text":"<pre><code># Install all dependencies into the environment (creates uv.lock if missing)\nuv sync\n\n# Update dependencies to latest allowed versions\nuv sync --upgrade\n\n# Compile lock file from requirements input\nuv pip compile pyproject.toml\n\n# Sync environment to match lock file\nuv pip sync uv.lock\n</code></pre>"},{"location":"2-project/uv-notes/#virtual-environments","title":"Virtual Environments","text":"<pre><code># Create a virtual environment\nuv venv\n\n# Create with specific Python version\nuv venv --python 3.11\n\n# Show where environment is\nuv venv --path\n</code></pre>"},{"location":"2-project/uv-notes/#running-code","title":"Running Code","text":"<pre><code># Run Python inside environment\nuv run python\n\n# Run a script\nuv run myscript.py\n\n# Run a command with dependencies\nuv run pytest\n</code></pre>"},{"location":"2-project/uv-notes/#python-versions","title":"Python Versions","text":"<pre><code># List installed Python versions\nuv python list\n\n# Install Python 3.11\nuv python install 3.11\n\n# Upgrade Python 3.11 to latest patch\nuv python upgrade 3.11\n\n# Show default Python\nuv python pin\n</code></pre>"},{"location":"2-project/uv-notes/#inspecting","title":"Inspecting","text":"<pre><code># Show dependency tree\nuv tree\n\n# Show project metadata\nuv project show\n</code></pre>"},{"location":"2-project/uv-notes/#building-and-publishing","title":"Building and Publishing","text":"<pre><code># Build source distribution and wheel\nuv build\n\n# Publish to PyPI (requires credentials)\nuv publish\n</code></pre>"},{"location":"2-project/uv-notes/#tools","title":"Tools","text":"<pre><code># Install a tool globally (example: black)\nuv tool install black\n\n# Run a tool\nuv tool run black --version\n\n# List installed tools\nuv tool list\n\n# Remove a tool\nuv tool uninstall black\n</code></pre>"},{"location":"2-project/uv-notes/#useful-options","title":"Useful Options","text":"<pre><code># Dry run, show what would happen\n--dry-run\n\n# Use lowest compatible versions\n--resolution=lowest\n\n# Target a different Python version when resolving\n--python-version 3.10\n</code></pre> <p>Correct. The cheat sheet I gave did not include <code>uvx</code>. Here is the missing section.</p>"},{"location":"2-project/uv-notes/#uvx-cheat-sheet","title":"<code>uvx</code> Cheat Sheet","text":"<p><code>uvx</code> is a shortcut to run any Python package or script without pre-installing it. It automatically downloads the package into a temporary cache, runs it, and reuses cached copies on later runs. It is like <code>npx</code> in Node.js.</p>"},{"location":"2-project/uv-notes/#syntax","title":"Syntax","text":"<pre><code>uvx &lt;package&gt; [arguments...]\n</code></pre>"},{"location":"2-project/uv-notes/#examples","title":"Examples","text":"<pre><code># Run black without installing globally\nuvx black myfile.py\n\n# Run flake8\nuvx flake8 src/\n\n# Run httpie\nuvx http --version\n\n# Run Django admin script\nuvx django-admin startproject mysite\n</code></pre>"},{"location":"2-project/uv-notes/#pinning-versions","title":"Pinning Versions","text":"<pre><code># Run a specific version of black\nuvx black==23.9.1 --version\n</code></pre>"},{"location":"2-project/uv-notes/#with-python-scripts","title":"With Python Scripts","text":"<pre><code># Run a Python script that is not installed\nuvx -m http.server 8000\n</code></pre>"},{"location":"2-project/uv-notes/#notes","title":"Notes","text":"<ul> <li><code>uvx</code> installs packages into a cache under your user directory.</li> <li>First run is slower, later runs are instant (from cache).</li> <li>If you need to clear cache:</li> </ul> <p><pre><code>uv cache clean\n</code></pre> * Useful for tools (linters, formatters, build helpers) you do not want in your project dependencies. * Equivalent to <code>npx</code> in Node.js or <code>pipx run</code> in Python.</p> <p><code>uv tool list</code> will never show what is in <code>pyproject.toml</code>.</p> <p>Two separate systems:</p> Scope Command What it manages Where it records state Project dependencies <code>uv add</code>, <code>uv remove</code>, <code>uv sync</code> The packages your project uses <code>pyproject.toml</code> + <code>uv.lock</code> Global tools <code>uv tool install</code>, <code>uv tool uninstall</code>, <code>uv tool list</code> Stand-alone CLI tools, like <code>black</code>, <code>ruff</code>, <code>httpie</code> User\u2019s tool directory (<code>~/.local/share/uv/tools/</code> by default) <p>So if you want to see project dependencies, use:</p> <pre><code>uv tree          # dependency graph\n</code></pre> <p>If you want to see globally installed tools, then use:</p> <pre><code>uv tool list\n</code></pre> <p>They are intentionally kept separate.</p> <p>With <code>uv</code>, you never edit <code>[tool.poetry.dependencies]</code> like in Poetry. You only use standard PEP 621 fields in <code>pyproject.toml</code>.</p> <p>Two ways to add dependencies:</p>"},{"location":"2-project/uv-notes/#1-let-uv-edit-pyprojecttoml-for-you","title":"1. Let <code>uv</code> edit <code>pyproject.toml</code> for you","text":"<pre><code># Add a runtime dependency\nuv add requests\n\n# Add a dev dependency\nuv add --dev pytest\n</code></pre> <p>This will:</p> <ul> <li>Update <code>pyproject.toml</code> under <code>[project]</code> or <code>[tool.uv]</code> (depending on context).</li> <li>Regenerate <code>uv.lock</code>.</li> </ul>"},{"location":"2-project/uv-notes/#2-edit-pyprojecttoml-manually","title":"2. Edit <code>pyproject.toml</code> manually","text":"<p>Minimal example with dependencies written by hand:</p> <pre><code>[project]\nname = \"myproj\"\nversion = \"0.1.0\"\ndescription = \"Example project\"\nrequires-python = \"&gt;=3.10\"\n\ndependencies = [\n    \"requests&gt;=2.31\",\n    \"flask&gt;=2.3\",\n]\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest&gt;=7.0\",\n]\n</code></pre> <p>Then run:</p> <pre><code>uv sync\n\n# List installed packages (table)\nuv pip list\n\n# Freeze environment (pip-compatible format)\nuv pip freeze\n</code></pre> <p>This will install what you declared and create/update <code>uv.lock</code>.</p>"},{"location":"2-project/uv-notes/#key-difference-from-poetry","title":"Key difference from Poetry","text":"<ul> <li>Poetry used <code>[tool.poetry.dependencies]</code> and <code>[tool.poetry.dev-dependencies]</code>.</li> <li>uv uses the PEP 621 standard <code>[project]</code> section for main dependencies.</li> <li>Dev dependencies live in <code>[tool.uv.dev-dependencies]</code>.</li> </ul>"},{"location":"2-project/changelog/changelog-0.7.0/","title":"Changelog 0.7.0 \u2013 Django Template","text":"<p>Date: 2025-10-05</p>"},{"location":"2-project/changelog/changelog-0.7.0/#release-highlights","title":"Release highlights","text":"<ul> <li>Added Unfold admin interface with Tailwind-based theming.</li> <li>Implemented multi-language (i18n) system for English, Polish, and German.</li> <li>Integrated Crispy Forms (unfold_crispy) for styled admin and Allauth forms.</li> <li>Re-architected <code>admin.py</code> inheritance to use <code>unfold.admin.ModelAdmin</code>.</li> <li>Added theme toggle with dark (default) and light (#FAF7F5) modes.</li> <li>Unified custom admin CSS/JS and login theming.</li> <li>Added callback functions for dashboard, environment, and sidebar badges.</li> </ul>"},{"location":"2-project/changelog/changelog-0.7.0/#added","title":"Added","text":""},{"location":"2-project/changelog/changelog-0.7.0/#1-unfold-installation-and-integration","title":"1. Unfold installation and integration","text":"<p>Install:</p> <pre><code>uv add django-unfold\n</code></pre> <p>Then add to <code>INSTALLED_APPS</code> (must come before Django admin):</p> <pre><code>UNFOLD_APPS = [\n    \"unfold\",\n    \"unfold.contrib.filters\",\n    \"unfold.contrib.forms\",\n    \"unfold.contrib.inlines\",\n    \"unfold.contrib.import_export\",\n    \"unfold.contrib.guardian\",\n    \"unfold.contrib.simple_history\",\n    \"unfold.contrib.location_field\",\n    \"unfold.contrib.constance\",\n]\nINSTALLED_APPS = UNFOLD_APPS + DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS\n</code></pre> <p>These provide:</p> <ul> <li>Filters and styled widgets</li> <li>Collapsible inlines</li> <li>Optional integrations (guardian, simple_history, constance)</li> </ul>"},{"location":"2-project/changelog/changelog-0.7.0/#2-new-admin-configuration-adminpy","title":"2. New admin configuration (admin.py)","text":"<pre><code>from allauth.account.decorators import secure_admin_login\nfrom django.conf import settings\nfrom django.contrib import admin\nfrom django.contrib.auth import admin as auth_admin\nfrom django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin\nfrom django.contrib.auth.models import Group\nfrom django.utils.translation import gettext_lazy as _\nfrom unfold.admin import ModelAdmin\n\nfrom .forms import UserAdminChangeForm, UserAdminCreationForm\nfrom .models import User\n\nif settings.DJANGO_ADMIN_FORCE_ALLAUTH:\n    admin.autodiscover()\n    admin.site.login = secure_admin_login(admin.site.login)\n\n@admin.register(User)\nclass UserAdmin(auth_admin.UserAdmin, ModelAdmin):\n    \"\"\"Combines Django\u2019s logic with Unfold\u2019s styling.\"\"\"\n    form = UserAdminChangeForm\n    add_form = UserAdminCreationForm\n    fieldsets = (\n        (None, {\"fields\": (\"email\", \"password\")}),\n        (_(\"Personal info\"), {\"fields\": (\"name\",)}),\n        (_(\"Permissions\"), {\"fields\": (\"is_active\", \"is_staff\", \"is_superuser\", \"groups\", \"user_permissions\")}),\n        (_(\"Important dates\"), {\"fields\": (\"last_login\", \"date_joined\")}),\n    )\n    list_display = [\"email\", \"name\", \"is_superuser\"]\n    ordering = [\"id\"]\n\n# Re-register Group with Unfold\nadmin.site.unregister(Group)\n@admin.register(Group)\nclass GroupAdmin(BaseGroupAdmin, ModelAdmin):\n    \"\"\"Ensures Unfold styling for built-in Group model.\"\"\"\n    pass\n</code></pre>"},{"location":"2-project/changelog/changelog-0.7.0/#3-unfold-configuration-in-basepy","title":"3. Unfold configuration in <code>base.py</code>","text":"<p>Added a full <code>UNFOLD = {}</code> configuration block:</p> <pre><code>UNFOLD = {\n    \"SITE_TITLE\": \"Django Template Admin\",\n    \"SITE_HEADER\": \"Django Template\",\n    \"SITE_SUBHEADER\": \"Administration Panel\",\n    \"SHOW_LANGUAGES\": True,\n    \"LANGUAGES\": {\n        \"navigation\": [\n            {\"code\": \"en\", \"name\": \"English\", \"name_local\": \"English\"},\n            {\"code\": \"pl\", \"name\": \"Polish\", \"name_local\": \"Polski\"},\n            {\"code\": \"de\", \"name\": \"German\", \"name_local\": \"Deutsch\"},\n        ],\n    },\n    \"SHOW_HISTORY\": True,\n    \"SHOW_VIEW_ON_SITE\": True,\n    \"SHOW_BACK_BUTTON\": True,\n    \"ENVIRONMENT\": \"django_template.admin_config.environment_callback\",\n    \"DASHBOARD_CALLBACK\": \"django_template.admin_config.dashboard_callback\",\n    \"THEME\": None,               # Enables toggle\n    \"THEME_DEFAULT\": \"dark\",     # Default view\n    \"BORDER_RADIUS\": \"10px\",\n    \"COLORS\": {\n        \"base\": {\n            \"50\": \"#FAF7F5\",\n            \"100\": \"#F3F0EE\",\n            \"200\": \"#E6E2DF\",\n            \"300\": \"#D0CCC8\",\n            \"700\": \"#222222\",\n            \"800\": \"#1C1C1C\",\n            \"900\": \"#171717\",\n            \"950\": \"#101010\",\n        },\n        \"primary\": {\n            \"50\": \"#E0F4FF\",\n            \"100\": \"#B8E3FF\",\n            \"200\": \"#8AD1FF\",\n            \"300\": \"#5BBEFF\",\n            \"400\": \"#37B0F8\",\n            \"500\": \"#2AA5F4\",\n            \"600\": \"#198CD7\",\n            \"700\": \"#1479BE\",\n            \"800\": \"#0F66A5\",\n            \"900\": \"#0B548C\",\n        },\n        \"font\": {\n            \"subtle-light\": \"#666666\",\n            \"default-light\": \"#222222\",\n            \"important-light\": \"#000000\",\n            \"subtle-dark\": \"#9D9D9D\",\n            \"default-dark\": \"#EDEDED\",\n            \"important-dark\": \"#FFFFFF\",\n        },\n    },\n}\n</code></pre> <p>This enables dark/light modes, proper contrast in dropdowns, and custom blue accent (#2AA5F4).</p>"},{"location":"2-project/changelog/changelog-0.7.0/#4-admin-callbacks-admin_configpy","title":"4. Admin callbacks (<code>admin_config.py</code>)","text":"<pre><code>def dashboard_callback(request, context):\n    context.update({\"project\": \"Django Template\"})\n    return context\n\ndef environment_callback(request):\n    return [\"Production\", \"success\"]\n\ndef environment_title_prefix_callback(request):\n    return \"[Production] \"\n\ndef badge_callback(request):\n    return 3 if request.user.is_superuser else None\n\ndef permission_callback(request):\n    return request.user.is_authenticated and request.user.is_staff\n</code></pre> <p>These drive Unfold\u2019s dynamic admin banner, badge counts, and sidebar logic.</p>"},{"location":"2-project/changelog/changelog-0.7.0/#5-internationalisation","title":"5. Internationalisation","text":"<p>Settings additions in <code>base.py</code>:</p> <pre><code>LANGUAGE_CODE = \"en\"\nUSE_I18N = True\nUSE_L10N = True\nLOCALE_PATHS = [str(BASE_DIR / \"locale\")]\nLANGUAGES = [\n    (\"en\", _(\"English\")),\n    (\"pl\", _(\"Polish\")),\n    (\"de\", _(\"German\")),\n]\n</code></pre> <p>URL configuration in <code>urls.py</code>:</p> <pre><code>from django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    path(\"i18n/\", include(\"django.conf.urls.i18n\")),\n]\n\nurlpatterns += i18n_patterns(\n    path(\"\", TemplateView.as_view(template_name=\"pages/home.html\"), name=\"home\"),\n    path(settings.ADMIN_URL, admin.site.urls),\n    path(\"users/\", include(\"django_template.users.urls\", namespace=\"users\")),\n    path(\"accounts/\", include(\"allauth.urls\")),\n)\n</code></pre>"},{"location":"2-project/changelog/changelog-0.7.0/#6-forms-integration","title":"6. Forms integration","text":"<p>Updated <code>forms.py</code> to ensure compatibility with Unfold and Allauth.</p> <pre><code>from allauth.account.forms import SignupForm\nfrom allauth.socialaccount.forms import SignupForm as SocialSignupForm\nfrom django.contrib.auth import forms as admin_forms\nfrom django.forms import EmailField\nfrom django.utils.translation import gettext_lazy as _\nfrom .models import User\n\nclass UserAdminChangeForm(admin_forms.UserChangeForm):\n    class Meta(admin_forms.UserChangeForm.Meta):\n        model = User\n        field_classes = {\"email\": EmailField}\n\nclass UserAdminCreationForm(admin_forms.AdminUserCreationForm):\n    class Meta(admin_forms.UserCreationForm.Meta):\n        model = User\n        fields = (\"email\",)\n        error_messages = {\n            \"email\": {\"unique\": _(\"This email has already been taken.\")},\n        }\n\nclass UserSignupForm(SignupForm): pass\nclass UserSocialSignupForm(SocialSignupForm): pass\n</code></pre> <p>Then in settings:</p> <pre><code>CRISPY_ALLOWED_TEMPLATE_PACKS = [\"bootstrap5\", \"unfold_crispy\"]\nCRISPY_TEMPLATE_PACK = \"unfold_crispy\"\n</code></pre>"},{"location":"2-project/changelog/changelog-0.7.0/#7-custom-admin-styles-and-scripts","title":"7. Custom admin styles and scripts","text":"<pre><code>\"STYLES\": [lambda request: static(\"css/custom-admin.css\")],\n\"SCRIPTS\": [lambda request: static(\"js/custom-admin.js\")],\n</code></pre> <p>Store these files in <code>/django_template/static/css/</code> and <code>/django_template/static/js/</code> for light theme tweaks (dropdowns, hover, and accent fixes).</p>"},{"location":"2-project/changelog/changelog-0.7.0/#8-multilingual-message-generation","title":"8. Multilingual message generation","text":"<p>To extract <code>.po</code> files:</p> <pre><code>docker compose -f docker-compose.local.yml -p local run --rm django \\\n  uv run django-admin makemessages -l en -l pl -l de \\\n  --ignore-file .makemessagesignore\n</code></pre> <p><code>.makemessagesignore</code>:</p> <pre><code>venv\n.venv\nstatic\nnode_modules\ndocs\ndocs/_build\n</code></pre>"},{"location":"2-project/changelog/changelog-0.7.0/#changed","title":"Changed","text":"<ul> <li>Replaced all Django <code>ModelAdmin</code> with Unfold equivalents.</li> <li>Moved Unfold configuration to main settings scope (after <code>INSTALLED_APPS</code>).</li> <li>Replaced static hard-coded language config with dynamic <code>SHOW_LANGUAGES</code>.</li> <li>Added Unfold callbacks for environment and dashboard.</li> <li>Set secure Allauth admin login.</li> </ul>"},{"location":"2-project/changelog/changelog-0.7.0/#fixed","title":"Fixed","text":"<ul> <li>Fixed missing styles for Allauth form fields under Unfold.</li> <li>Fixed dropdown text contrast under dark theme.</li> <li>Fixed admin theme persistence after login.</li> <li>Fixed Celery Beat admin dropdown field styling.</li> <li>Fixed locale extraction file ownership in Docker.</li> </ul>"},{"location":"2-project/changelog/changelog-0.7.0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Any custom admin templates overriding default Django <code>admin/</code> must be rewritten for Unfold.</li> <li>All custom admin classes must subclass <code>unfold.admin.ModelAdmin</code>.</li> <li>URLs now require language prefixes (<code>/en/</code>, <code>/pl/</code>, <code>/de/</code>).</li> <li>Removed reliance on Bootstrap forms for admin\u2014now replaced by Crispy + Unfold.</li> </ul>"},{"location":"2-project/changelog/changelog-0.7.0/#security","title":"Security","text":"<ul> <li>Enforced HTTP-only cookies:</li> </ul> <p><pre><code>SESSION_COOKIE_HTTPONLY = True\nCSRF_COOKIE_HTTPONLY = True\n</code></pre> * Improved Redis SSL detection. * All admin logins now go through <code>allauth.account.decorators.secure_admin_login</code>.</p>"},{"location":"2-project/changelog/changelog-0.7.0/#reference-commit-range","title":"Reference commit range","text":"<p>From: <code>v0.6.9</code> To: <code>v0.7.0</code> Author: @sean-njela</p>"},{"location":"2-project/changelog/changelog-0.8.0/","title":"v0.8.0 \u2014 Split Hybrid Monolith","text":"<ul> <li>New interface layer for web and API.</li> <li>New service layer for reusable domain logic.</li> <li>URLs reorganized. API routes no longer localized.</li> <li>Basic user list page with HTMX partial refresh.</li> <li>Public read-only users API.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#breaking-changes","title":"Breaking changes","text":"<ul> <li>None at the database level.</li> <li>If you previously routed <code>/</code> from app code, ensure only one home route exists (see URLs).</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#migration-guide","title":"Migration guide","text":"<ol> <li>Install as usual. No schema changes.</li> <li>Verify settings and URLs edits below.</li> <li>Run checks:</li> </ol> <p><pre><code>python manage.py check\npython manage.py runserver\n</code></pre> 4. Test:</p> <ul> <li>Web: <code>/{lang}/people/</code></li> <li>API: <code>/api/public-users/</code> (auth required)</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#added","title":"Added","text":""},{"location":"2-project/changelog/changelog-0.8.0/#new-apps","title":"New apps","text":"<pre><code>django_template/apps/\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 models.py                  # placeholder\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 user_service.py\n\u2502   \u251c\u2500\u2500 integrations/              # placeholder\n\u2502   \u2514\u2500\u2500 validators.py\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 serializers.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 views.py\n\u2514\u2500\u2500 web/\n    \u251c\u2500\u2500 apps.py\n    \u251c\u2500\u2500 urls.py\n    \u251c\u2500\u2500 views.py\n    \u251c\u2500\u2500 static/                    # app static root\n    \u2514\u2500\u2500 templates/\n        \u251c\u2500\u2500 web/\n        \u2502   \u2514\u2500\u2500 user_list.html\n        \u2514\u2500\u2500 htmx_partials/\n            \u2514\u2500\u2500 user_row.html\n</code></pre>"},{"location":"2-project/changelog/changelog-0.8.0/#service-layer","title":"Service layer","text":"<p><code>shared/services/user_service.py</code></p> <pre><code>from django.contrib.auth import get_user_model\nUser = get_user_model()\n\ndef list_users():\n    return User.objects.all().only(\"id\", \"email\", \"name\").order_by(\"id\")\n\ndef get_user(pk: int):\n    return User.objects.only(\"id\", \"email\", \"name\").get(pk=pk)\n</code></pre>"},{"location":"2-project/changelog/changelog-0.8.0/#api","title":"API","text":"<ul> <li><code>api/serializers.py</code> exposes <code>id</code>, <code>email</code>, <code>name</code>.</li> <li><code>api/views.py</code> adds <code>PublicUserViewSet</code> (read-only, authenticated).</li> <li><code>api/urls.py</code> registers <code>public-users/</code>.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#web","title":"Web","text":"<ul> <li> <p><code>web/urls.py</code>:</p> </li> <li> <p><code>people/</code> \u2192 users table.</p> </li> <li><code>htmx/user-row/&lt;int:pk&gt;/</code> \u2192 row refresh partial.</li> <li><code>web/views.py</code> renders list and partial using the service layer.</li> <li><code>web/templates/web/user_list.html</code> includes HTMX and a refresh button per row.</li> <li><code>web/templates/htmx_partials/user_row.html</code> updates a single row.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#changed","title":"Changed","text":""},{"location":"2-project/changelog/changelog-0.8.0/#settings-configsettingsbasepy","title":"Settings (<code>config/settings/base.py</code>)","text":"<ul> <li><code>INSTALLED_APPS</code>:</li> </ul> <p><pre><code>LOCAL_APPS = [\n    \"django_template.users\",\n    \"django_template.apps.shared\",\n    \"django_template.apps.api\",\n    \"django_template.apps.web\",\n]\n</code></pre> * Templates dirs:</p> <p><pre><code>TEMPLATES[0][\"DIRS\"] = [\n    str(APPS_DIR / \"templates\"),\n    str(APPS_DIR / \"apps\" / \"web\" / \"templates\"),\n]\n</code></pre> * Static dirs:</p> <pre><code>STATICFILES_DIRS = [\n    str(APPS_DIR / \"static\"),\n    str(APPS_DIR / \"apps\" / \"web\" / \"static\"),\n]\n</code></pre>"},{"location":"2-project/changelog/changelog-0.8.0/#urls-configurlspy","title":"URLs (<code>config/urls.py</code>)","text":"<ul> <li>Keep API outside <code>i18n_patterns</code>. Add web include inside.</li> </ul> <pre><code># i18n block\nurlpatterns += i18n_patterns(\n    path(\"\", TemplateView.as_view(template_name=\"pages/home.html\"), name=\"home\"),\n    path(\"about/\", TemplateView.as_view(template_name=\"pages/about.html\"), name=\"about\"),\n    path(settings.ADMIN_URL, admin.site.urls),\n    path(\"users/\", include(\"django_template.users.urls\", namespace=\"users\")),\n    path(\"accounts/\", include(\"allauth.urls\")),\n    path(\"\", include(\"django_template.apps.web.urls\")),\n    *static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT),\n)\n\n# API (no locale)\nurlpatterns += [\n    path(\"api/\", include(\"config.api_router\")),                 # existing users router\n    path(\"api/\", include(\"django_template.apps.api.urls\")),     # new API endpoints\n    path(\"api/auth-token/\", obtain_auth_token, name=\"obtain_auth_token\"),\n    path(\"api/schema/\", SpectacularAPIView.as_view(), name=\"api-schema\"),\n    path(\"api/docs/\", SpectacularSwaggerView.as_view(url_name=\"api-schema\"), name=\"api-docs\"),\n]\n</code></pre>"},{"location":"2-project/changelog/changelog-0.8.0/#htmx-partial-path","title":"HTMX partial path","text":"<ul> <li><code>web/views.py</code> renders:</li> </ul> <pre><code>return render(request, \"htmx_partials/user_row.html\", {\"u\": u})\n</code></pre>"},{"location":"2-project/changelog/changelog-0.8.0/#fixed","title":"Fixed","text":"<ul> <li>None.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#removed","title":"Removed","text":"<ul> <li>None.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#verification-steps","title":"Verification steps","text":"<ol> <li>Create two users. Ensure at least one has <code>name</code> set.</li> <li>Visit <code>/{lang}/people/</code>. Confirm table renders with <code>id</code>, <code>email</code>, <code>name</code>.</li> <li>Click \u201cRefresh row\u201d. Network should show <code>GET /{lang}/htmx/user-row/&lt;id&gt;/ 200</code>. The row updates with a timestamp.</li> <li>Call <code>/api/public-users/</code> with an authenticated session or token. Expect JSON:</li> </ol> <pre><code>[{\"id\":1,\"email\":\"x@example.com\",\"name\":\"X\"}]\n</code></pre>"},{"location":"2-project/changelog/changelog-0.8.0/#notes","title":"Notes","text":"<ul> <li><code>config/api_router.py</code> remains as the legacy router. New endpoints live in <code>apps/api/urls.py</code>. Paths must be unique (<code>users/</code> vs <code>public-users/</code>).</li> <li>Keep only one home route. If you later move home into <code>apps/web</code>, remove the <code>TemplateView</code> line.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#ops","title":"Ops","text":"<ul> <li>No env var changes.</li> <li>No Celery changes.</li> <li>Collect static as usual in production.</li> </ul>"},{"location":"2-project/changelog/changelog-0.8.0/#known-issues","title":"Known issues","text":"<ul> <li>If HTMX does not trigger, ensure the script is loaded:</li> </ul> <p><pre><code>&lt;script src=\"{% static 'unfold/js/htmx/htmx.js' %}\"&gt;&lt;/script&gt;\n</code></pre> * If the table never updates, confirm the partial template path and 200 response.</p>"},{"location":"2-project/changelog/changelog-0.8.0/#files-touched-concise","title":"Files touched (concise)","text":"<ul> <li>New: <code>django_template/apps/{shared,api,web}/**</code> as listed.</li> <li>Edited: <code>config/settings/base.py</code>, <code>config/urls.py</code>.</li> </ul> <p>Hit:</p> <p>Web list: http://localhost:8000/en/people/</p> <p>API list: http://localhost:8000/api/public-users/</p>"},{"location":"2-project/tasks/0-overview/","title":"Overview","text":"<p>This Taskfile defines automation tasks to simplify development workflows and ensure consistency across environments.</p> <p>It abstracts repetitive shell commands into named tasks you can run with:</p> <pre><code>task &lt;task-name&gt; # runs a task\n</code></pre> <p>You can list all available tasks with:</p> <pre><code>task --list-all\n</code></pre> <p>For detailed details about taskfile use:</p> <ul> <li>Main Taskfile</li> <li>GitFlow Taskfile</li> </ul>"},{"location":"2-project/tasks/0-overview/#contact","title":"Contact","text":"<p>Questions or issues with GitFlow setup? Reach out via GitHub Issues or email at your.email@example.com.</p>"},{"location":"2-project/tasks/1-main-taskfile/","title":"Main Taskfile Overview","text":"<p>This section describes the purpose and layout of the main <code>Taskfile.yml</code> used in this project. The Taskfile defines automation tasks to simplify development workflows and ensure consistency across environments.</p>"},{"location":"2-project/tasks/1-main-taskfile/#purpose-of-this-taskfile","title":"Purpose of This Taskfile","text":"<p>This Taskfile provides command-line shortcuts for tasks like:</p> <ul> <li>Project setup</li> <li>Development environment bootstrapping</li> <li>Application deployment</li> <li>Local documentation serving</li> <li>Cleanup and teardown</li> </ul> <p>It abstracts repetitive shell commands into named tasks you can run with:</p> <pre><code>task &lt;task-name&gt;\n</code></pre>"},{"location":"2-project/tasks/1-main-taskfile/#core-sections","title":"Core Sections","text":""},{"location":"2-project/tasks/1-main-taskfile/#1-setup-initialization","title":"1. Setup &amp; Initialization","text":"<p>Includes tasks for:</p> <ul> <li>Installing dependencies</li> <li>Setting up local development tools</li> <li>Generating keys or configs (if applicable)</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#2-development-workflow","title":"2. Development Workflow","text":"<p>Common tasks for:</p> <ul> <li>Starting local services or dev containers</li> <li>Running dev servers</li> <li>Applying Kubernetes configs or local manifests</li> <li>Watching for file changes</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#3-documentation","title":"3. Documentation","text":"<p>Tasks to:</p> <ul> <li>Serve documentation locally (e.g., MkDocs)</li> <li>Build or deploy docs (if using GitHub Pages or mike)</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#4-deployment-automation","title":"4. Deployment &amp; Automation","text":"<p>Tasks may automate:</p> <ul> <li>Building and pushing Docker images</li> <li>Running linters or formatters</li> <li>Applying infrastructure changes (e.g., with Terraform)</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#5-cleanup-teardown","title":"5. Cleanup &amp; Teardown","text":"<p>Includes safe commands to:</p> <ul> <li>Tear down local clusters or containers</li> <li>Remove generated files or environments</li> <li>Reset state for fresh runs</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#typical-usage-flow","title":"Typical Usage Flow","text":"<p>A typical flow using this Taskfile might look like:</p> <ul> <li>Set up your environment:</li> </ul> <pre><code>task setup\n</code></pre> <ul> <li>Start development:</li> </ul> <pre><code>task dev\n</code></pre> <ul> <li>Serve documentation:</li> </ul> <pre><code>task docs\n</code></pre> <ul> <li>Clean up:</li> </ul> <pre><code>task cleanup\n</code></pre>"},{"location":"2-project/tasks/1-main-taskfile/#notes","title":"Notes","text":"<ul> <li>To list all available tasks:</li> </ul> <pre><code>task --list-all\n</code></pre> <ul> <li>Variables and flags can be passed to tasks like so:</li> </ul> <pre><code>task my-task &lt;var&gt;=&lt;value&gt;\n</code></pre> <ul> <li>You can structure task dependencies using <code>deps:</code> and reuse shell logic cleanly across environments.</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#tips","title":"Tips","text":"Key Description dotenv + env: auto-load .env files and allow task-specific overrides. vars: static or dynamic variables (via shell) for templated substitution. prompt: even for setup or prod, ask user before proceeding. preconditions: enforce environment state before running. deps: define ordering (serial) via deps for safety and repeatability. internal: hide helper tasks from user listings. platforms: restrict tasks to specific OS/arch. requires: enforce required input variables. status: skip tasks if outputs already exist."},{"location":"2-project/tasks/1-main-taskfile/#related-docs","title":"Related Docs","text":"<ul> <li>GitFlow Taskfile</li> <li>Getting Started</li> <li>Architecture Overview</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#contact","title":"Contact","text":"<p>For issues or suggestions related to automation and task structure, open an issue or contact the maintainer at seannjela@outlook.com.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/","title":"GitFlow Taskfile Overview","text":"<p>This page explains the structure and functionality of the <code>Taskfile.gitflow.yml</code> file, which automates a standardized Git workflow using Git Flow conventions. This taskfile is designed to simplify and formalize branching, releasing, and hotfixing in projects that follow the GitFlow methodology.</p> <p>It is optional to use gitflow.</p> <p>If you do not want to use it, you can remove the <code>Taskfile.gitflow.yml</code> file and unlink it from the <code>Taskfile.yaml</code> file (remove the <code>includes</code> section). If you cannot find the section use <code>CTRL + F</code> to search for Taskfile.yaml.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#what-is-git-flow","title":"What is Git Flow?","text":"<p>Git Flow is a branching strategy that separates feature development from production releases. It introduces long-lived branches like <code>main</code> and <code>develop</code>, as well as temporary branches for features, releases, and hotfixes.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#purpose-of-this-taskfile","title":"Purpose of This Taskfile","text":"<p>The <code>Taskfile.gitflow.yml</code> automates repetitive Git Flow actions using the <code>task</code> CLI tool. It allows you to:</p> <ul> <li>Initialize a Git Flow structure with default branches and prefixes</li> <li>Create and finish feature branches</li> <li>Create release and hotfix branches</li> <li>Push and merge code with consistent naming and flow</li> <li>Eliminate manual mistakes in branch naming or merging</li> </ul> <p>This is especially useful in teams or long-running solo projects where structured release cycles are important.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#what-this-taskfile-automates","title":"What This Taskfile Automates","text":"<p>Here\u2019s a breakdown of what\u2019s covered:</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#1-initialization","title":"1. Initialization","text":"<ul> <li>Sets up Git Flow with <code>main</code> as the production branch and <code>develop</code> for ongoing work.</li> <li>Configures standard prefixes (<code>feature/</code>, <code>release/</code>, <code>hotfix/</code>, etc.).</li> <li>Ensures required branches (<code>main</code>, <code>develop</code>) exist locally and remotely.</li> <li>Optionally initializes the <code>gh-pages</code> branch for documentation deployments.</li> </ul> <p>This is typically run once at the start of the project using <code>task -t Taskfile.gitflow.yml init</code>.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#2-feature-branch-management","title":"2. Feature Branch Management","text":"<ul> <li>Start a new feature branch from <code>develop</code></li> <li>Finish a feature by merging it back into <code>develop</code></li> <li>Automatically push changes to the remote</li> <li>Prevents common mistakes like forgetting to push or rebase</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#3-release-branch-management","title":"3. Release Branch Management","text":"<ul> <li>Create a release branch off <code>develop</code></li> <li>Optionally tag a version</li> <li>Merge into <code>main</code> and <code>develop</code></li> <li>Clean up the release branch</li> <li>Pushes changes and tags to the remote</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#4-hotfix-branch-management","title":"4. Hotfix Branch Management","text":"<ul> <li>Create a hotfix directly off <code>main</code> (for production issues)</li> <li>Merge back into both <code>main</code> and <code>develop</code></li> <li>Optionally tag the hotfix release</li> <li>Push changes and remove local branches</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#5-branch-cleanup-and-syncing","title":"5. Branch Cleanup and Syncing","text":"<ul> <li>Deletes local feature/release branches after merging</li> <li>Pulls and syncs remote branches as needed</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#typical-usage-flow","title":"Typical Usage Flow","text":"<ol> <li> <p>Initialize GitFlow structure <pre><code>task init\n</code></pre></p> </li> <li> <p>Start a new feature <pre><code>task feature:start name=\"add-login\"\n</code></pre></p> </li> <li> <p>Finish a feature <pre><code>task feature:finish name=\"add-login\"\n</code></pre></p> </li> <li> <p>Start a release <pre><code>task release:start version=\"1.0.0\"\n</code></pre></p> </li> <li> <p>Start a hotfix <pre><code>task hotfix:start version=\"1.0.1\"\n</code></pre></p> </li> <li> <p>Finish a release <pre><code>task release:finish version=\"1.0.0\"\n</code></pre></p> </li> <li> <p>Finish a hotfix <pre><code>task hotfix:finish version=\"1.0.1\"\n</code></pre></p> </li> </ol>"},{"location":"2-project/tasks/2-gitflow-taskfile/#when-should-you-use-this","title":"When Should You Use This?","text":"<p>Use this taskfile when:</p> <ul> <li>You want consistent branch names and GitFlow discipline</li> <li>You're working in long-lived projects that ship versioned releases</li> <li>You have documentation (e.g. via <code>mike</code>) that needs coordinated tagging</li> <li>You want to automate repetitive Git steps safely</li> </ul> <p>Avoid using it if:</p> <ul> <li>Your workflow is trunk-based (i.e., no <code>develop</code>)</li> <li>You're doing rapid prototyping without versioning</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#notes","title":"Notes","text":"<ul> <li>This taskfile assumes Git is already initialized and the remote origin is set.</li> <li>It is safe to re-run <code>init</code>; it won\u2019t overwrite existing GitFlow config.</li> <li>The file uses <code>{{.VAR_NAME}}</code> placeholders \u2014 these are defined in the task's command-line usage.</li> <li>You can see available tasks by running:</li> </ul> <pre><code>task --list-all\n</code></pre>"},{"location":"2-project/tasks/2-gitflow-taskfile/#related-docs","title":"Related Docs","text":"<ul> <li>Main Taskfile Overview</li> <li>Getting Started</li> <li>Architecture</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#contact","title":"Contact","text":"<p>Questions or issues with GitFlow setup? Reach out via GitHub Issues or email at seannjela@outlook.com.</p>"},{"location":"3-troubleshooting/0-overview/","title":"Troubleshooting Guide Overview","text":"<p>Welcome to the troubleshooting section of this documentation. This guide exists to help you diagnose and resolve common issues that may arise while using or setting up this project.</p> <p>Use the search bar at the top of this page to type keywords related to your issue (e.g., docker, cluster, permissions) and quickly find relevant entries.</p>"},{"location":"3-troubleshooting/0-overview/#what-youll-find-here","title":"What You'll Find Here","text":"<p>Each page in this section covers a specific issue or category of problems. These are meant to be: - Concise - Actionable - Focused on real problems encountered during development or deployment</p> <p>You can browse specific problem pages here:</p> <ul> <li>Problem 1</li> <li>Problem 2</li> <li>(More will be added as new issues are documented)</li> </ul> <p>Important Disclaimer</p> <p>This is a personal documentation site. I am maintaining it solo and cannot guarantee that every issue is fully documented or resolved. If you don\u2019t find a solution here, don\u2019t panic \u2014 most tools used in this project (e.g., Docker, Kubernetes, Terraform, Devbox) are widely adopted and well-supported. Try these resources first:</p> <ol> <li>ChatGPT or another AI assistant \u2013 Quick answers and guided debugging  </li> <li>YouTube \u2013 Visual walkthroughs for complex tools or errors  </li> <li>Google \u2013 Forums, GitHub Issues, and StackOverflow posts are often goldmines  </li> </ol>"},{"location":"3-troubleshooting/0-overview/#pro-tip","title":"Pro Tip","text":"<p>When searching using the search bar above, include the name of the tool or parts of the error message (in quotes if exact), e.g.:</p> <p>\"helm install\" or \"helm\" \"chart not found\" or \"not found\" \"terraform apply\" or \"terraform\" \"invalid provider configuration\" or \"provider not found\" \"kubectl apply\" or \"kubectl\" \"namespace not found\" or \"namespace does not exist\"</p> <p>Thank you for your patience and initiative \u2014 the more we learn from problems, the better this documentation will become.</p>"},{"location":"3-troubleshooting/1-problem1/","title":"Problem Title (Short and Specific)","text":"<p>A short one-liner summary of the issue, e.g., \u201cHelm chart fails with \u2018chart not found\u2019 error\u201d.</p>"},{"location":"3-troubleshooting/1-problem1/#context","title":"Context","text":"<p>Briefly describe when/where this issue happens: - What tool was being used? - What command was run? - What environment (e.g., Devbox, Docker, local cluster)? - Optional: Any preconditions or relevant setup</p>"},{"location":"3-troubleshooting/1-problem1/#symptoms","title":"Symptoms","text":"<p>List or describe the symptoms: - Error messages (you can add real output later) - Logs or console behavior - What \"broke\" or stopped working</p>"},{"location":"3-troubleshooting/1-problem1/#possible-causes","title":"Possible Causes","text":"<p>List 1\u20133 likely causes of this issue: - Misconfiguration - Dependency/version mismatch - Network or permissions issue</p>"},{"location":"3-troubleshooting/1-problem1/#resolution-if-available","title":"Resolution (If Available)","text":"<p>Leave this blank until you've confirmed a fix.</p>"},{"location":"3-troubleshooting/1-problem1/#workarounds-optional","title":"Workarounds (Optional)","text":"<p>Alternative approaches or partial fixes that helped during debugging.</p>"},{"location":"3-troubleshooting/1-problem1/#external-references","title":"External References","text":"<p>Useful links, docs, or forum threads: - Stack Overflow Thread - Official Docs - GitHub Issue</p>"},{"location":"3-troubleshooting/1-problem1/#notes","title":"Notes","text":"<ul> <li>Is this a recurring issue?</li> <li>Does it affect production or just local dev?</li> <li>Can this be caught with a precheck or task later?</li> </ul>"},{"location":"3-troubleshooting/2-problem2/","title":"Problem Title (Short and Specific)","text":"<p>A short one-liner summary of the issue, e.g., \u201cHelm chart fails with \u2018chart not found\u2019 error\u201d.</p>"},{"location":"3-troubleshooting/2-problem2/#context","title":"Context","text":"<p>Briefly describe when/where this issue happens: - What tool was being used? - What command was run? - What environment (e.g., Devbox, Docker, local cluster)? - Optional: Any preconditions or relevant setup</p>"},{"location":"3-troubleshooting/2-problem2/#symptoms","title":"Symptoms","text":"<p>List or describe the symptoms: - Error messages (you can add real output later) - Logs or console behavior - What \"broke\" or stopped working</p>"},{"location":"3-troubleshooting/2-problem2/#possible-causes","title":"Possible Causes","text":"<p>List 1\u20133 likely causes of this issue: - Misconfiguration - Dependency/version mismatch - Network or permissions issue</p>"},{"location":"3-troubleshooting/2-problem2/#resolution-if-available","title":"Resolution (If Available)","text":"<p>Leave this blank until you've confirmed a fix.</p>"},{"location":"3-troubleshooting/2-problem2/#workarounds-optional","title":"Workarounds (Optional)","text":"<p>Alternative approaches or partial fixes that helped during debugging.</p>"},{"location":"3-troubleshooting/2-problem2/#external-references","title":"External References","text":"<p>Useful links, docs, or forum threads: - Stack Overflow Thread - Official Docs - GitHub Issue</p>"},{"location":"3-troubleshooting/2-problem2/#notes","title":"Notes","text":"<ul> <li>Is this a recurring issue?</li> <li>Does it affect production or just local dev?</li> <li>Can this be caught with a precheck or task later?</li> </ul>"},{"location":"4-about/0-about/","title":"About Me","text":"<p>Dang, you really wanna know huh?</p> <p>I\u2019m Sean Njela, DevOpsSean. I'm a developer, engineer, and lifelong learner documenting my personal and professional projects.</p> <p>This site serves as a central hub for my technical work, built using MkDocs and organized to reflect real-world implementations, lessons learned, and ongoing exploration in areas like DevOps, infrastructure, automation, and system design.</p>"},{"location":"4-about/0-about/#why-this-exists","title":"Why This Exists","text":"<p>This documentation is part of an ongoing effort to:</p> <ul> <li>Capture complex project setups in a reusable, referenceable format</li> <li>Practice clear technical communication</li> <li>Save future-me from future-headaches</li> <li>Share knowledge with others who might stumble across this work</li> </ul> <p>Whether you're here to learn, debug, borrow ideas, or just browse, you're welcome.</p>"},{"location":"4-about/0-about/#tools-and-tech-i-often-work-with","title":"Tools and Tech I Often Work With","text":"<p>Some of the technologies you'll find across these projects:</p> <ul> <li>Containers: Docker, Kubernetes, Kind</li> <li>Infrastructure: Terraform, Helm, Devbox</li> <li>Automation: Taskfile, Make, CI/CD workflows</li> <li>Docs: MkDocs, markdown, GitHub Pages</li> <li>Languages: Python, Bash, YAML</li> </ul> <p>This stack evolves as I experiment and learn \u2014 not every project will use everything.</p>"},{"location":"4-about/0-about/#about-this-site","title":"About This Site","text":"<ul> <li>Built with <code>mkdocs-material</code></li> <li>Versioned using <code>mike</code></li> <li>Fully local-first and Git-managed</li> <li>Organized by topic, not tool \u2014 documentation follows the problem or pattern</li> </ul>"},{"location":"4-about/0-about/#contact","title":"Contact","text":"<p>I\u2019m always open to questions, feedback, or conversation:</p> <ul> <li>GitHub: @sean-njela</li> <li>Email: sean.njela@gmail.com</li> <li>Twitter/X: @devopssean</li> </ul> <p>Thanks for visiting !</p>"}]}